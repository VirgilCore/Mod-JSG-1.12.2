import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }

}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'


version = "${mc_version}-${mod_version}"
group = "tauri.dev.jsg"
archivesBaseName = "${build_extrapath}jsg"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/jei_at.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net/"
    }

    maven {
        // location of the maven that hosts JEI files
        name = "JEI maven"
        //url = "https://maven.blamejared.com/mezz/jei"
        url = "https://modmaven.dev"
    }

    maven {
        name = "OpenComputers Maven"
        url = "https://maven.cil.li/"
    }

    maven {
        name = "ic2"
        url = "https://maven.ic2.player.to/"
    }

    maven {
        name = "fluidlogged-api"
        url = 'https://jitpack.io'
    }
    jcenter()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'

    implementation fg.deobf("cofh:RedstoneFlux:${rf_mc_version}-${rf_version}:universal")
    implementation fg.deobf("cofh:CoFHCore:${mc_version}-${cofh_core_version}:universal")

    compileOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}")

    compile "li.cil.oc:OpenComputers:MC1.12.2-1.7.5.213:api"

    compile 'com.github.jbredwards:fluidlogged-api:2573e41f3e'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", mod_version
    inputs.property "mcversion", mc_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': mod_version, 'mcversion': mc_version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Just Stargate Mod",
                "Specification-Vendor"    : "Just Stargate Mod",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Just Stargate Mod",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task replaceTokens(type: Sync) {
    from sourceSets.main.java
    inputs.property 'mc_version', project.mod_version.toString()
    inputs.property 'version', project.version.toString()
    filter(ReplaceTokens, tokens: [VERSION: version.toString()])
    filter(ReplaceTokens, tokens: [MCVERSION: "${project.mc_version}".toString()])
    into "$buildDir/src"
}

compileJava {
    source = replaceTokens.outputs
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

